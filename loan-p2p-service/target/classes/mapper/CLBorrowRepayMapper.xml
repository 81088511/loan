<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hwc.framework.modules.dao.CLBorrowRepayMapper" >
  <resultMap id="BaseResultMap" type="com.hwc.framework.modules.model.CLBorrowRepay" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="borrow_id" property="borrowId" jdbcType="BIGINT" />
    <result column="real_amount" property="realAmount" jdbcType="DECIMAL" />
    <result column="interest" property="interest" jdbcType="DECIMAL" />
    <result column="seq" property="seq" jdbcType="INTEGER" />
    <result column="rate" property="rate" jdbcType="DECIMAL" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="real_amount_balance" property="realAmountBalance" jdbcType="DECIMAL" />
    <result column="repay_amount" property="repayAmount" jdbcType="DECIMAL" />
    <result column="repay_time" property="repayTime" jdbcType="TIMESTAMP" />
    <result column="state" property="state" jdbcType="VARCHAR" />
    <result column="penalty_amout" property="penaltyAmout" jdbcType="DECIMAL" />
    <result column="penalty_day" property="penaltyDay" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="isNotity_user" property="isNotityUser" jdbcType="VARCHAR" />
    <result column="overdue_time" property="overdueTime" jdbcType="TIMESTAMP" />
    <result column="overdue" property="overdue" jdbcType="TIMESTAMP" />
  </resultMap> 
  <sql id="Base_Column_List" >
    id, user_id, borrow_id, real_amount, interest, seq, rate, amount, real_amount_balance, 
    repay_amount, repay_time, state, penalty_amout, penalty_day, create_time, isNotity_user, overdue_time, overdue
  </sql>
  <select id="queryNeedQueryOrders" resultMap="BaseResultMap" >
      select
      <include refid="Base_Column_List" />
      from cl_borrow_repay
      where state = '40'
      limit 1000
  </select>
  <select id="findNextBorrowRepay" resultMap="BaseResultMap" >
    SELECT
    <include refid="Base_Column_List" />
    from cl_borrow_repay
    WHERE seq = #{seq}
    AND borrow_id = #{borrowId}
  </select>
  <select id="findBorrowRepaysByUserIdAndBorrowId" resultMap="BaseResultMap" >
    SELECT
    <include refid="Base_Column_List" />
    from cl_borrow_repay
    WHERE user_id = #{userId}
    AND borrow_id = #{borrowId}
    AND state = '20'
    ORDER BY repay_time ASC
  </select>
  <select id="getAlreadyRepayCountsByBorrowId" resultType="java.lang.Integer" parameterType="java.lang.Long" >
    SELECT COUNT(*)
     FROM cl_borrow_repay
     WHERE borrow_id = #{borrowId}
     AND state = '10'
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from cl_borrow_repay
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from cl_borrow_repay
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.hwc.framework.modules.model.CLBorrowRepay" >
    insert into cl_borrow_repay (id, user_id, borrow_id, 
      real_amount, interest, seq, 
      rate, amount, real_amount_balance, 
      repay_amount, repay_time, state, 
      penalty_amout, penalty_day, create_time
      )
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{borrowId,jdbcType=BIGINT}, 
      #{realAmount,jdbcType=DECIMAL}, #{interest,jdbcType=DECIMAL}, #{seq,jdbcType=INTEGER}, 
      #{rate,jdbcType=DECIMAL}, #{amount,jdbcType=DECIMAL}, #{realAmountBalance,jdbcType=DECIMAL}, 
      #{repayAmount,jdbcType=DECIMAL}, #{repayTime,jdbcType=TIMESTAMP}, #{state,jdbcType=VARCHAR}, 
      #{penaltyAmout,jdbcType=DECIMAL}, #{penaltyDay,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hwc.framework.modules.model.CLBorrowRepay" >
    insert into cl_borrow_repay
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="borrowId != null" >
        borrow_id,
      </if>
      <if test="realAmount != null" >
        real_amount,
      </if>
      <if test="interest != null" >
        interest,
      </if>
      <if test="seq != null" >
        seq,
      </if>
      <if test="rate != null" >
        rate,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="realAmountBalance != null" >
        real_amount_balance,
      </if>
      <if test="repayAmount != null" >
        repay_amount,
      </if>
      <if test="repayTime != null" >
        repay_time,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="penaltyAmout != null" >
        penalty_amout,
      </if>
      <if test="penaltyDay != null" >
        penalty_day,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="borrowId != null" >
        #{borrowId,jdbcType=BIGINT},
      </if>
      <if test="realAmount != null" >
        #{realAmount,jdbcType=DECIMAL},
      </if>
      <if test="interest != null" >
        #{interest,jdbcType=DECIMAL},
      </if>
      <if test="seq != null" >
        #{seq,jdbcType=INTEGER},
      </if>
      <if test="rate != null" >
        #{rate,jdbcType=DECIMAL},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="realAmountBalance != null" >
        #{realAmountBalance,jdbcType=DECIMAL},
      </if>
      <if test="repayAmount != null" >
        #{repayAmount,jdbcType=DECIMAL},
      </if>
      <if test="repayTime != null" >
        #{repayTime,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null" >
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="penaltyAmout != null" >
        #{penaltyAmout,jdbcType=DECIMAL},
      </if>
      <if test="penaltyDay != null" >
        #{penaltyDay,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hwc.framework.modules.model.CLBorrowRepay" >
    update cl_borrow_repay
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="borrowId != null" >
        borrow_id = #{borrowId,jdbcType=BIGINT},
      </if>
      <if test="realAmount != null" >
        real_amount = #{realAmount,jdbcType=DECIMAL},
      </if>
      <if test="interest != null" >
        interest = #{interest,jdbcType=DECIMAL},
      </if>
      <if test="seq != null" >
        seq = #{seq,jdbcType=INTEGER},
      </if>
      <if test="rate != null" >
        rate = #{rate,jdbcType=DECIMAL},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="realAmountBalance != null" >
        real_amount_balance = #{realAmountBalance,jdbcType=DECIMAL},
      </if>
      <if test="repayAmount != null" >
        repay_amount = #{repayAmount,jdbcType=DECIMAL},
      </if>
      <if test="repayTime != null" >
        repay_time = #{repayTime,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=VARCHAR},
      </if>
      <if test="penaltyAmout != null" >
        penalty_amout = #{penaltyAmout,jdbcType=DECIMAL},
      </if>
      <if test="penaltyDay != null" >
        penalty_day = #{penaltyDay,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isNotityUser != null" >
        isNotity_user = #{isNotityUser,jdbcType=VARCHAR},
      </if>
      <if test="overdueTime != null" >
        overdue_time = #{overdueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="overdue != null" >
        overdue = #{overdue,jdbcType=INTEGER}
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateRepayInProgress" parameterType="java.lang.Long" >
    update cl_borrow_repay
    set state = '40'
    WHERE id = #{repayId}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hwc.framework.modules.model.CLBorrowRepay" >
    update cl_borrow_repay
    set user_id = #{userId,jdbcType=BIGINT},
      borrow_id = #{borrowId,jdbcType=BIGINT},
      real_amount = #{realAmount,jdbcType=DECIMAL},
      interest = #{interest,jdbcType=DECIMAL},
      seq = #{seq,jdbcType=INTEGER},
      rate = #{rate,jdbcType=DECIMAL},
      amount = #{amount,jdbcType=DECIMAL},
      real_amount_balance = #{realAmountBalance,jdbcType=DECIMAL},
      repay_amount = #{repayAmount,jdbcType=DECIMAL},
      repay_time = #{repayTime,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=VARCHAR},
      penalty_amout = #{penaltyAmout,jdbcType=DECIMAL},
      penalty_day = #{penaltyDay,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <sql id="searchModelBy">
        <if test="name !='' and name !=null">
            and c.name like concat("%",#{name,jdbcType=VARCHAR},"%")
        </if>
        <if test="orderNo !='' and orderNo !=null">
            and c.order_no = #{orderNo,jdbcType=VARCHAR}
        </if>
        <if test="mobile !='' and mobile !=null">
            and c.mobile = #{mobile,jdbcType=VARCHAR}
        </if>
        <if test="state != null and state != '' ">
            and r.state = #{state,jdbcType=VARCHAR}
        </if>
        <if test="start != null">
            and r.repay_time &gt;= #{start,jdbcType=TIMESTAMP}
        </if>
        <if test="end  != null">
            and r.repay_time &lt; #{end,jdbcType=TIMESTAMP}
        </if>
        <if test="borrow_type != null and borrow_type !=''">
            and c.borrow_type = #{borrow_type,jdbcType=VARCHAR}
        </if>
        <if test="isNotityUser != null and isNotityUser !=''">
            and r.isNotity_user = #{isNotityUser,jdbcType=VARCHAR}
        </if>
        <if test="seq != null">
            and r.seq &gt;= #{seq,jdbcType=INTEGER}
        </if>
        <if test="borrowId != null and borrowId !=''">
            and r.borrow_id = #{borrowId,jdbcType=BIGINT}
        </if>
    </sql>
  <select id="getUnRepayList" parameterType="java.util.HashMap" resultMap="BaseResultMap">
        select 
        <include refid="Base_Column_List" />
        From cl_borrow_repay r where r.state != 10
        <include refid="searchModelBy"/>
   </select>
  <select id="getOverdueList" parameterType="java.util.HashMap" resultType="java.lang.Long">
    select
    DISTINCT r.borrow_id
    From cl_borrow_repay r where r.state != 10
    AND r.repay_time  &lt;  #{end,jdbcType=TIMESTAMP}
  </select>
  <select id="loadOverdue" parameterType="java.util.HashMap" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    From cl_borrow_repay r where r.state != 10
    and r.borrow_id = #{borrowId,jdbcType=BIGINT} AND r.overdue is NULL
    AND r.repay_time  &lt;   #{end,jdbcType=TIMESTAMP} ORDER BY seq LIMIT 1
  </select>
  <select id="getOverdue" parameterType="java.util.HashMap" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    From cl_borrow_repay r where r.state != 10
    and r.borrow_id = #{borrowId,jdbcType=BIGINT}
    AND r.seq = #{seq,jdbcType=INTEGER}
  </select>
  
    <select id="queryCanPayOrder" resultMap="BaseResultMap" parameterType="java.util.HashMap">
	 select
    <include refid="Base_Column_List" />
     From cl_borrow_repay cbr 
     where cbr.state = '20' 
     and  (DATE_FORMAT(cbr.repay_time,'%Y-%m-%d') &lt; DATE_ADD(CURDATE(),INTERVAL 1 DAY))
	<if test="userId !=null and userId !=''">
		AND cbr.user_id IN (#{userId,jdbcType=VARCHAR})
	</if>
	 AND cbr.`borrow_id` IN (SELECT id FROM cl_borrow cl WHERE cl.borrow_type=#{clBorrowType,jdbcType=VARCHAR})	
  	</select>
</mapper>